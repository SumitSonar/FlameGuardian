<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Opencv JS - Video Dehazing and Desmoking</title>
    <script async src="js/opencv.js" onload="openCvReady();"></script>
    <script src="js/utils.js"></script>
</head>
<body>
    <div style="display:flex;">
        <div style="flex:1;">
            <video id="cam_input" height="480" width="640" autoplay></video>
        </div>
        <div style="flex:1;">
            <canvas id="canvas_output" height="480" width="640"></canvas>
        </div>
    </div>
</body>
<script type="text/javascript">
function openCvReady() {
  cv['onRuntimeInitialized']=()=>{
    let video = document.getElementById("cam_input");
    navigator.mediaDevices.getUserMedia({ video: true, audio: false })
    .then(function(stream) {
        video.srcObject = stream;
        video.play();
    })
    .catch(function(err) {
        console.log("An error occurred! " + err);
    });

    const FPS = 24;
    const cap = new cv.VideoCapture(cam_input);
    const dst = new cv.Mat(video.height, video.width, cv.CV_8UC4);
    const canvasOutput = document.getElementById('canvas_output');
    const ctx = canvasOutput.getContext('2d');

    function processVideo() {
        let begin = Date.now();
        cap.read(dst);
       
        // Dehazing
        dehaze(dst);

        // Desmoking
        desmoke(dst);

        cv.imshow("canvas_output", dst);
       
        // Draw processed frame on canvas
        ctx.drawImage(canvasOutput, 0, 0, video.width, video.height);
       
        // Schedule next frame processing
        let delay = 1000 / FPS - (Date.now() - begin);
        setTimeout(processVideo, delay);
    }

    // Start processing video frames
    setTimeout(processVideo, 0);
  };
}

// Dehazing function using dark channel prior
function dehaze(image) {
    const darkChannel = new cv.Mat();
    cv.cvtColor(image, image, cv.COLOR_RGBA2RGB);
    cv.cvtColor(image, darkChannel, cv.COLOR_RGB2GRAY);
    cv.erode(darkChannel, darkChannel, cv.Mat.ones(3, 3, cv.CV_8U), new cv.Point(-1, -1), 1, cv.BORDER_REFLECT);
    let minVal = new cv.Mat();
    let maxVal = new cv.Mat();
    cv.minMaxLoc(darkChannel, minVal, maxVal);
    cv.subtract(maxVal, darkChannel, darkChannel);
    cv.divide(darkChannel, maxVal, darkChannel, 255, cv.CV_8U);
    cv.bitwise_not(darkChannel, darkChannel);
    cv.cvtColor(darkChannel, darkChannel, cv.COLOR_GRAY2RGB);
    cv.multiply(image, darkChannel, image, 1, cv.CV_8U);
}

// Desmoking function using color thresholding
function desmoke(image) {
    const hsv = new cv.Mat();
    cv.cvtColor(image, hsv, cv.COLOR_RGB2HSV);
    const lowerThreshold = new cv.Scalar(0, 0, 0);
    const upperThreshold = new cv.Scalar(180, 255, 150);
    const mask = new cv.Mat();
    cv.inRange(hsv, lowerThreshold, upperThreshold, mask);
    cv.bitwise_not(mask, mask);
    cv.cvtColor(mask, mask, cv.COLOR_GRAY2RGB);
    cv.multiply(image, mask, image, 1, cv.CV_8U);
}
</script>
</html>